name: Run

on:
  schedule:
    - cron: '1-59/30 * * * *' # https://crontab.guru/#1-59/30_*_*_*_*
  push:
    branches: [master]

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_PATH: current-artifact
      ARTIFACT_NAME: last-storage-data
      STORAGE_FILENAME: storage.json

    steps:
      - uses: actions/checkout@v2

      - name: Download the last artifact content and create the `storage.json` file
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eu

          ## https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository
          artifact_id=$(curl -fs -u ${REPO%/*}:${GH_TOKEN} "https://api.github.com/repos/${REPO}/actions/artifacts?per_page=1" | jq '.artifacts[0].id')
          if [ "$artifact_id" = "null" ]; then ## There is no artifact uploaded
            echo '{}' > $STORAGE_FILENAME
          else
            artifact="last_artifact.zip"
            echo "Will download the artifact with id $artifact_id"

            ## https://developer.github.com/v3/actions/artifacts/#download-an-artifact
            curl -fL -u ${REPO%/*}:${GH_TOKEN} -o $artifact "https://api.github.com/repos/${REPO}/actions/artifacts/${artifact_id}/zip"
            file $artifact
            unzip -o $artifact

            test -f "$STORAGE_FILENAME" || {
              echo "The last artifact downloaded doesn't have the file '$STORAGE_FILENAME'"
              unzip -l $artifact
              exit 1
            }
          fi

      - run: cat "${STORAGE_FILENAME}"

      - uses: actions/setup-node@v1
        if: success()
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        if: success()
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install NPM dependencies (using the lock file)
        run: npm ci --prod

      - name: Create path to artifact
        if: success()
        run: mkdir -v -p ${ARTIFACT_PATH}
      - name: Run the task
        if: success()
        id: last_scrap
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          REPO: ${{ secrets.REPO }}
          TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          TWITCH_OAUTH_ACCESS_TOKEN: ${{ secrets.TWITCH_OAUTH_ACCESS_TOKEN }}
          TWITCH_CHANNEL: ${{ secrets.TWITCH_CHANNEL }}
        run: |
          scrap_output_path="${ARTIFACT_PATH}/${STORAGE_FILENAME}"
          ( npm start "$STORAGE_FILENAME" ) && cp "$STORAGE_FILENAME" "$scrap_output_path"
      - name: Upload an artifact with the last content of storage file
        uses: actions/upload-artifact@v1
        if: success()
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
      - name: Delete all artifacts but the last uploaded
        if: success()
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 2m # Assuming the last upload didnâ€™t happen in the last 2 minutes.
